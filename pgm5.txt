A. Evaluation of suffix expression with single digit operands and operators: 
+,-,*,/,%,^.
#include<stdio.h>
#include<math.h>
#include<string.h>
#include<ctype.h>
double compute(char symbol, double op1,double op2)
{
switch(symbol)
{
case '+':return op1+op2;
case '-':return op1-op2;
case '*':return op1*op2;
case '/':return op1/op2;
case '$':
case '^':return pow(op1,op2);
default:return 0;
}
}
int main()
{
double s[10];
double res,op1,op2;
int top=-1,i;
char postfix[20];
char symbol;
printf("enter the postfix expression\n");
scanf("%s",postfix);
for(i=0;i<strlen(postfix);i++)
{
symbol=postfix[i];
if(isdigit(symbol))
{
s[++top]=symbol-'0';
}
else
{
op2=s[top--];
op1=s[top--];
res=compute(symbol,op1,op2);
s[++top]=res;
}
}
res=s[top--];
printf("result is %f\n",res);
return 0;
}
B. Solving Tower of Hanoi problem with n disks
#include <stdio.h>
int count = 0;
void tower(int n, int source, int temp, int destination) 
{
 if (n == 1) 
 {
 printf("Move disc 1 from rod %c to rod %c\n", source, destination);
 count++;
 return;
 }
 tower(n - 1, source, destination, temp); 
 printf("Move disc %d from rod %c to rod %c\n", n, source, destination);
 count++;
 tower(n - 1, temp, source, destination); 
}
void main() 
{
 int n;
 printf("Enter the number of discs:\n");
 scanf("%d", &n);
 tower(n, 'A', 'B', 'C'); 
 printf("Total number of moves: %d\n", count);
}
